This program will create a max-heap and perform operations on it based on data from a file.
 
Operation: p
print_on = 1

in main:
array is NULL

Operation: l
load array...

in main:
Array:  size: 5, capacity : 5
indexes:           0,      1,      2,      3,      4, 
values:           10,     40,     20,     50,     90, 

Operation: h
in array2heap, array BEFORE it gets turned into a heap :
Array:  size: 5, capacity : 5
indexes:           0,      1,      2,      3,      4, 
values:           10,     40,     20,     50,     90, 
sink_down: idx = 1
sink_down: idx = 4
in array2heap, array after sink_down at index 1.
Array:  size: 5, capacity : 5
indexes:           0,      1,      2,      3,      4, 
values:           10,     90,     20,     50,     40, 
sink_down: idx = 0
sink_down: idx = 1
sink_down: idx = 3
in array2heap, array after sink_down at index 0.
Array:  size: 5, capacity : 5
indexes:           0,      1,      2,      3,      4, 
values:           90,     50,     20,     10,     40, 

in main:
Array:  size: 5, capacity : 5
indexes:           0,      1,      2,      3,      4, 
values:           90,     50,     20,     10,     40, 

Operation: i
increase and swim up: item at index   2 becomes     95
Array:  size: 5, capacity : 5
indexes:           0,      1,      2,      3,      4, 
values:           90,     50,     95,     10,     40, 
swim_up: idx = 2
swim_up: idx = 0

in main:
Array:  size: 5, capacity : 5
indexes:           0,      1,      2,      3,      4, 
values:           95,     50,     90,     10,     40, 

Operation: d
decrease and sink down: item at index   1 becomes     30
Array:  size: 5, capacity : 5
indexes:           0,      1,      2,      3,      4, 
values:           95,     30,     90,     10,     40, 
sink_down: idx = 1
sink_down: idx = 4

in main:
Array:  size: 5, capacity : 5
indexes:           0,      1,      2,      3,      4, 
values:           95,     40,     90,     10,     30, 

Operation: a
add:          13
FULL. Resizing...............................
swim_up: idx = 5

in main:
Array:  size: 6, capacity : 10
indexes:           0,      1,      2,      3,      4,      5, 
values:           95,     40,     90,     10,     30,     13, 

Operation: a
add:         100
swim_up: idx = 6
swim_up: idx = 2
swim_up: idx = 0

in main:
Array:  size: 7, capacity : 10
indexes:           0,      1,      2,      3,      4,      5,      6, 
values:          100,     40,     95,     10,     30,     13,     90, 

Operation: r
sink_down: idx = 0
sink_down: idx = 2
removed:    100

in main:
Array:  size: 6, capacity : 10
indexes:           0,      1,      2,      3,      4,      5, 
values:           95,     40,     90,     10,     30,     13, 

Operation: s
in array2heap, array BEFORE it gets turned into a heap :
Array:  size: 6, capacity : 6
indexes:           0,      1,      2,      3,      4,      5, 
values:           95,     40,     90,     10,     30,     13, 
sink_down: idx = 2
in array2heap, array after sink_down at index 2.
Array:  size: 6, capacity : 6
indexes:           0,      1,      2,      3,      4,      5, 
values:           95,     40,     90,     10,     30,     13, 
sink_down: idx = 1
in array2heap, array after sink_down at index 1.
Array:  size: 6, capacity : 6
indexes:           0,      1,      2,      3,      4,      5, 
values:           95,     40,     90,     10,     30,     13, 
sink_down: idx = 0
in array2heap, array after sink_down at index 0.
Array:  size: 6, capacity : 6
indexes:           0,      1,      2,      3,      4,      5, 
values:           95,     40,     90,     10,     30,     13, 
sink_down: idx = 0
sink_down: idx = 2
Array:  size: 5, capacity : 6
indexes:           0,      1,      2,      3,      4, 
values:           90,     40,     13,     10,     30, 
sink_down: idx = 0
sink_down: idx = 1
Array:  size: 4, capacity : 6
indexes:           0,      1,      2,      3, 
values:           40,     30,     13,     10, 
sink_down: idx = 0
sink_down: idx = 1
Array:  size: 3, capacity : 6
indexes:           0,      1,      2, 
values:           30,     10,     13, 
sink_down: idx = 0
Array:  size: 2, capacity : 6
indexes:           0,      1, 
values:           13,     10, 
sink_down: idx = 0
Array:  size: 1, capacity : 6
indexes:           0, 
values:           10, 

in main:
Array:  size: 6, capacity : 10
indexes:           0,      1,      2,      3,      4,      5, 
values:           10,     13,     30,     40,     90,     95, 

Operation: w
in array2heap, array BEFORE it gets turned into a heap :
Array:  size: 6, capacity : 6
indexes:           0,      1,      2,      3,      4,      5, 
values:           10,     13,     30,     40,     90,     95, 
sink_down: idx = 2
sink_down: idx = 5
in array2heap, array after sink_down at index 2.
Array:  size: 6, capacity : 6
indexes:           0,      1,      2,      3,      4,      5, 
values:           10,     13,     95,     40,     90,     30, 
sink_down: idx = 1
sink_down: idx = 4
in array2heap, array after sink_down at index 1.
Array:  size: 6, capacity : 6
indexes:           0,      1,      2,      3,      4,      5, 
values:           10,     90,     95,     40,     13,     30, 
sink_down: idx = 0
sink_down: idx = 2
sink_down: idx = 5
in array2heap, array after sink_down at index 0.
Array:  size: 6, capacity : 6
indexes:           0,      1,      2,      3,      4,      5, 
values:           95,     90,     30,     40,     13,     10, 
sink_down: idx = 0
sink_down: idx = 1
sink_down: idx = 3
sink_down: idx = 0
sink_down: idx = 1
swim_up: idx = 4
removed: 95 and 90
Array:  size: 5, capacity : 6
indexes:           0,      1,      2,      3,      4, 
values:           40,     13,     30,     10,      5, 
sink_down: idx = 0
sink_down: idx = 2
sink_down: idx = 0
sink_down: idx = 1
swim_up: idx = 3
removed: 40 and 30
Array:  size: 4, capacity : 6
indexes:           0,      1,      2,      3, 
values:           13,     10,      5,     10, 
sink_down: idx = 0
sink_down: idx = 0
sink_down: idx = 1
swim_up: idx = 2
removed: 13 and 10
Array:  size: 3, capacity : 6
indexes:           0,      1,      2, 
values:           10,      5,      3, 
sink_down: idx = 0
sink_down: idx = 1
sink_down: idx = 0
swim_up: idx = 1
swim_up: idx = 0
removed: 10 and 5
Array:  size: 2, capacity : 6
indexes:           0,      1, 
values:            5,      3, 
sink_down: idx = 0
sink_down: idx = 0
swim_up: idx = 0
removed: 5 and 3
Array:  size: 1, capacity : 6
indexes:           0, 
values:            2, 
Last stone weight is: 2

in main:
Array:  size: 6, capacity : 10
indexes:           0,      1,      2,      3,      4,      5, 
values:            2,      5,     10,     13,     40,     95, 
